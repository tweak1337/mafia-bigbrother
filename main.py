import time

from aiogram import Dispatcher, Bot, executor, types

import fuck
import os
from datetime import datetime, timedelta
import openpyxl
import asyncio
import aioschedule
import random
import re
import json
from googletrans import Translator

bot = Bot(token=os.getenv('TOKEN'))

dp = Dispatcher(bot)



@dp.message_handler(content_types=['new_chat_members'])
async def user_join(message: types.Message):

    try:
        user = message.new_chat_members[0].username
    except:
        user = message.new_chat_members[0].first_name

    await message.answer(f'–ü—Ä–∏–≤–µ—Ç @{user}!\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –∫ –Ω–∞–º –≤ –ú–∞—Ñ–ö–ª—É–±ü§óüïµüèª‚Äç‚ôÇÔ∏è\n'
                         f'–ó–¥–µ—Å—å —Ç—ã —Å–º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ –¥—Ä—É–∑–µ–π, –∞ —Ç–∞–∫ –∂–µ –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ –≤—Å–µ—Ö –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –∏–≥—Ä –∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–πüòâ\n'
                         f'–ù–æ —É –Ω–∞—Å –µ—Å—Ç—å –ø—Ä–æ—Å—Ç—ã–µ –ø—Ä–∞–≤–∏–ª–∞:\n'
                         f'1. –í —á–∞—Ç–µ –∑–∞–ø—Ä–µ—â–∞–µ—Ç—Å—è –≤—ã—Ä–∞–∂–∞—Ç—å—Å—è –º–∞—Ç–æ–º (—Å–∫—Ä—ã—Ç—ã–π –º–∞—Ç –¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è)ü§¨\n'
                         f'2. –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –Ω–∞ –ª–∏—á–Ω–æ—Å—Ç–∏ –∏ –æ—Å–∫–æ—Ä–±–ª—è—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ —Ç–æ–∂–µ –Ω–µ–ª—å–∑—è, –º—ã - –∂–∏–≤–µ–º –¥—Ä—É–∂–Ω–æü´±üèª‚Äçü´≤üèº\n'
                         f'3. –°–ª–∏–≤–∞—Ç—å –ª–∏—á–Ω—ã–µ –ø–µ—Ä–µ–ø–∏—Å–∫–∏, —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –æ—Å–∫–æ—Ä–±–∏—Ç–µ–ª—å–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞ü´£\n'
                         f'–û—á–µ–Ω—å —Ä–∞–¥—ã, —á—Ç–æ —Ç—ã –∫ –Ω–∞–º –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è‚ù§Ô∏è')


@dp.message_handler(commands=['help', 'start'])
async def user_join(message: types.Message):
    await message.answer(f'–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã. –í –æ—Å–Ω–æ–≤–Ω–æ–º —è –±–∞–Ω—é –∑–∞ –º–∞—Ç, –Ω–æ –µ—â–µ —è —É–º–µ—é –æ—Å–∫–æ—Ä–±–ª—è—Ç—å, –∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è\n\n'
                         f'–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –∫–æ–≥–æ-—Ç–æ –æ—Å–∫–æ—Ä–±–∏—Ç—å, –≤—ã–±–µ—Ä–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –Ω–∞–ø–∏—à–∏ /–æ—Å–∫–æ—Ä–±–∏—Ç—å.\n\n'
                         f'–ï—Å–ª–∏ —Ö–æ—á–µ—à—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–µ, –Ω–∞–ø–∏—à–∏ /—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –í–ê–®–ï –û–°–ö–û–†–ë–õ–ï–ù–ò–ï.\n\n'
                         f'–£—á—Ç–∏, —á—Ç–æ –º–∞—Ç—ã –∏ —Å–ª–∏—à–∫–æ–º –≥—Ä—É–±—ã–µ –≤—ã–∫–∞–∑—ã–≤–∞–Ω–∏—è —Ç—É—Ç —Ç–∞–∫ –∂–µ –∑–∞–ø—Ä–µ—â–µ–Ω—ã!')


@dp.message_handler(commands=['–æ—Å–∫–æ—Ä–±–∏—Ç—å', 'insult'])
async def user_join(message: types.Message):
    try:
        try:
            user = message.from_user.username
        except:
            user = message.from_user.first_name
    except:
        user = 'Unnamed'

    file = 'story.xlsx'
    wb = openpyxl.load_workbook(file)
    sheet = wb.worksheets[0]
    row_count = sheet.max_row
    range_cells = sheet['B2':f'B{row_count}']
    insult_list = []
    for row in range_cells:
        for cell in row:
            insult_list.append(cell.value)

    insult = random.choice(insult_list)

    try:
        await message.answer(f'@{message.reply_to_message.from_user.username}, {insult}')
    except:
        await message.answer(insult)



@dp.message_handler(commands=['—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å', 'save'])
async def user_join(message: types.Message):

    try:
        try:
            user = message.from_user.username
        except:
            user = message.from_user.first_name
    except:
        user = 'Unnamed'

    file = 'story.xlsx'
    wb = openpyxl.load_workbook(file)
    sheet = wb.worksheets[0]
    row_count = sheet.max_row

    insult = message.text[11:]
    sheet[f'A{row_count + 1}'] = str(user)
    sheet[f'B{row_count + 1}'] = str(insult)
    wb.save(file)

    text = insult.split()
    text = [re.sub(r'[^\w\s]', '', i) for i in text]
    counter = 0
    for word in fuck.fuck_list:
        for mes in text:
            if word == mes:
                counter +=1

    if counter > 0:
        await message.delete()
        await message.answer(f'–ú–∞—Ç—ã –≤ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è—Ö –∑–∞–ø—Ä–µ—â–µ–Ω—ã, –∫–∞–∫ –±—ã —Å—Ç—Ä–∞–Ω–Ω–æ —ç—Ç–æ –Ω–µ –∑–≤—É—á–∞–ª–æ')
    else:
        try:
            await message.answer(f'–û—Å–∫–æ—Ä–±–ª–µ–Ω–∏–µ "{insult}" —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.')
        except:
            await message.answer(insult)




@dp.message_handler(commands=['translate', '–ø–µ—Ä–µ–≤–µ—Å—Ç–∏'])
async def user_join(message: types.Message):

    if not message.reply_to_message:
        await message.answer("–ù—É–∂–Ω–æ –ø—Ä–æ—Ü–∏—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –µ–≥–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏.")
        return
    else:
        translator = Translator()
        translate = translator.translate(text=message.reply_to_message.text, dest='ru')
        translate = translate.text
        await message.answer(translate, reply=True)

@dp.message_handler(commands=['translate_eng'])
async def user_join(message: types.Message):

    if not message.reply_to_message:
        await message.answer("–ù—É–∂–Ω–æ –ø—Ä–æ—Ü–∏—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –µ–≥–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏.")
        return
    else:
        translator = Translator()
        translate = translator.translate(text=message.reply_to_message.text, dest='en')
        translate = translate.text
        await message.answer(translate, reply=True)

@dp.message_handler()
async def mess_handler(message: types.Message):
    text0 = message.text.lower()
    
    try:
        try:
            user = message.from_user.username
        except:
            user = message.from_user.first_name
    except:
        user = 'Unnamed'

    text = text0.split()
    text = [re.sub(r'[^\w\s]', '', i) for i in text]

    if '111' in text:
        await bot.restrict_chat_member(chat_id=message.chat.id, user_id=363700041,
                                        can_send_messages=True,
                                       can_send_other_messages=True,
                                       can_send_media_messages=True, can_add_web_page_previews=True)

    x= dict(message)
    jsoon = json.dumps(x, indent=4, ensure_ascii=False)

    for word in fuck.fuck_list:
        for mes in text:
            if word == mes and 'spoiler' not in str(message.entities):
                await message.forward(chat_id=363700041)
                await message.delete()

                file = 'toban.xlsx'
                wb = openpyxl.load_workbook(file)
                sheet = wb.worksheets[0]
                row_count = sheet.max_row
                sheet[f'A{row_count + 1}'] = str(user)
                sheet[f'B{row_count + 1}'] = str(message.from_user.id)
                sheet[f'C{row_count + 1}'] = str(text0)
                counter = 1
                range_cells = sheet['A1':f'A{row_count}']
                for row in range_cells:
                    for cell in row:
                        if cell.value == user:
                            counter +=1
                print(counter)
                if counter == 1 or counter == 2:
                    alert = '–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è'
                else:
                    alert = '–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ'
                wb.save(file)
                if user != 'Jackmalkovich':
                    if counter < 4:

                        await bot.send_message(message.chat.id, f'@{user}, –º–∞—Ç–µ—Ä–∏—Ç—å—Å—è –∑–∞–ø—Ä–µ—â–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—É—é –ª–µ–∫—Å–∏–∫—É.\n'
                                                            f'–î–æ –±–∞–Ω–∞ –æ—Å—Ç–∞–ª–æ—Å—å {4-counter} {alert}.')
                    elif counter == 4:
                        now = datetime.today()
                        one_day = timedelta(hours=1)
                        ban_time = now + one_day
                        await bot.restrict_chat_member(chat_id=message.chat.id, user_id=message.from_user.id,
                                                       until_date=ban_time, can_send_messages=False,
                                                       can_send_other_messages=False,
                                                       can_send_media_messages=False, can_add_web_page_previews=False)
                        await bot.send_message(message.chat.id,
                                               f'@{user}, –î–æ—Å–≤–∏–¥–æ—Å)))! –£–≤–∏–¥–∏–º—Å—è —á–µ—Ä–µ–∑ —á–∞—Å. \n\n–ü–æ—Å–ª–µ —Ä–∞–∑–±–∞–Ω–∞, –≤ —Å–ª—É—á–∞–µ –º–∞—Ç–∞, –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –±—É–¥–µ—Ç –Ω–∞ 3 —á–∞—Å–∞.')
                    elif counter == 5:
                        now = datetime.today()
                        one_day = timedelta(hours=3)
                        ban_time = now + one_day
                        await bot.restrict_chat_member(chat_id=message.chat.id, user_id=message.from_user.id,
                                                       until_date=ban_time, can_send_messages=False,
                                                       can_send_other_messages=False,
                                                       can_send_media_messages=False, can_add_web_page_previews=False)
                        await bot.send_message(message.chat.id,
                                               f'@{user}, –î–æ—Å–≤–∏–¥–æ—Å)))! –£–≤–∏–¥–∏–º—Å—è —á–µ—Ä–µ–∑ —Ç—Ä–∏ —á–∞—Å–∞. \n\n–ü–æ—Å–ª–µ —Ä–∞–∑–±–∞–Ω–∞, –≤ —Å–ª—É—á–∞–µ –º–∞—Ç–∞, –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –±—É–¥–µ—Ç –Ω–∞ 12 —á–∞—Å–æ–≤.')
                    else:
                        now = datetime.today()
                        one_day = timedelta(hours=12)
                        ban_time = now + one_day
                        await bot.restrict_chat_member(chat_id=message.chat.id, user_id=message.from_user.id,
                                                       until_date=ban_time, can_send_messages=False,
                                                       can_send_other_messages=False,
                                                       can_send_media_messages=False, can_add_web_page_previews=False)
                        await bot.send_message(message.chat.id,
                                               f'@{user}, –î–æ—Å–≤–∏–¥–æ—Å)))! –£–≤–∏–¥–∏–º—Å—è —á–µ—Ä–µ–∑ 12 —á–∞—Å–æ–≤.')
                else:
                    counter = 0
                    for row in sheet.iter_rows():
                        for cell in row:
                            if cell.value == user:
                                counter += 1

                    if 12-counter == 2 or 12-counter == 3 or 12-counter == 4:
                        alert = '–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è'
                    elif 12-counter == 1:
                        alert = '–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ'
                    else:
                        alert = '–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π'

                    if counter < 12:
                        await bot.send_message(message.chat.id, f'–ì–æ—Å–ø–æ–¥–∏–Ω @{user}, –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å, –ø—Ä–æ—à—É –ø—Ä–æ—â–µ–Ω–∏—è, –Ω–æ –º–∞—Ç–µ—Ä–∏—Ç—å—Å—è –∑–∞–ø—Ä–µ—â–µ–Ω–æ.\n'
                                                            f'–î–æ –±–∞–Ω–∞ –æ—Å—Ç–∞–ª–æ—Å—å {12-counter} {alert}.')
                    else:
                        now = datetime.today()
                        one_day = timedelta(hours=12)
                        ban_time = now + one_day
                        await bot.restrict_chat_member(chat_id=message.chat.id, user_id=message.from_user.id,
                                                       until_date=ban_time, can_send_messages=False,
                                                       can_send_other_messages=False,
                                                       can_send_media_messages=False, can_add_web_page_previews=False)
                        await bot.send_message(message.chat.id,
                                               f'@{user}, –î–æ—Å–≤–∏–¥–æ—Å! –£–≤–∏–¥–∏–º—Å—è —á–µ—Ä–µ–∑ 12 —á–∞—Å–æ–≤)))')


async def clearexcel():
    file = 'toban.xlsx'
    wb = openpyxl.load_workbook(file)
    sheet = wb.worksheets[0]

    for row in sheet.iter_rows():
        for cell in row:
            cell.value = None

    wb.save(file)
    print('excel cleared successfully')


async def scheduler():
    aioschedule.every(12).hours.do(clearexcel)
    while True:
        await aioschedule.run_pending()
        await asyncio.sleep(1)

async def on_startup(_):
    asyncio.create_task(scheduler())

if __name__== '__main__':
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
